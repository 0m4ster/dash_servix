#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Streamlit para Railway
Trata as vari√°veis de ambiente de forma mais robusta
"""

import os
import sys
import subprocess
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_port():
    """Obt√©m a porta da vari√°vel de ambiente PORT ou usa padr√£o"""
    port = os.environ.get('PORT')
    
    if port is None:
        logger.info("PORT n√£o definido, usando porta padr√£o 8501")
        return 8501
    
    try:
        port_int = int(port)
        logger.info(f"Usando porta: {port_int}")
        return port_int
    except ValueError:
        logger.warning(f"PORT '{port}' n√£o √© um n√∫mero v√°lido, usando porta padr√£o 8501")
        return 8501

def create_dynamic_config(port):
    """Cria um arquivo de configura√ß√£o din√¢mico para o Streamlit"""
    config_content = f"""[server]
port = {port}
address = "0.0.0.0"
enableCORS = false
enableXsrfProtection = false
headless = true

[browser]
gatherUsageStats = false
"""
    
    # Criar diret√≥rio .streamlit se n√£o existir
    os.makedirs('.streamlit', exist_ok=True)
    
    # Escrever configura√ß√£o
    config_path = '.streamlit/config.toml'
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    logger.info(f"‚úÖ Configura√ß√£o do Streamlit criada em {config_path}")
    return config_path

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando Dashboard SMS...")
    
    # Verificar se estamos em um ambiente Docker
    if os.path.exists('/.dockerenv'):
        logger.info("üê≥ Executando em container Docker")
    else:
        logger.info("üíª Executando em ambiente local")
    
    # Verificar vari√°veis de ambiente
    logger.info("üîç Vari√°veis de ambiente dispon√≠veis:")
    for key, value in os.environ.items():
        if 'PORT' in key or 'STREAMLIT' in key:
            logger.info(f"  {key}: {value}")
    
    # Obter porta
    port = get_port()
    
    # Criar configura√ß√£o din√¢mica
    create_dynamic_config(port)
    
    # Verificar se o arquivo dash_api.py existe
    if not os.path.exists('dash_api.py'):
        logger.error("‚ùå ERRO: dash_api.py n√£o encontrado!")
        logger.info("üìÅ Arquivos no diret√≥rio atual:")
        for file in os.listdir('.'):
            logger.info(f"  {file}")
        sys.exit(1)
    
    # Verificar se o streamlit est√° instalado
    try:
        import streamlit
        logger.info(f"‚úÖ Streamlit {streamlit.__version__} encontrado")
    except ImportError:
        logger.error("‚ùå ERRO: streamlit n√£o est√° instalado!")
        sys.exit(1)
    
    logger.info("‚úÖ Verifica√ß√µes conclu√≠das, iniciando Streamlit...")
    
    # Construir comando para iniciar Streamlit
    cmd = [
        sys.executable, '-m', 'streamlit', 'run', 'dash_api.py',
        '--server.port', str(port),
        '--server.address', '0.0.0.0'
    ]
    
    logger.info(f"üöÄ Comando: {' '.join(cmd)}")
    
    # Iniciar Streamlit
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro ao executar Streamlit: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üõë Streamlit interrompido pelo usu√°rio")
        sys.exit(0)

if __name__ == '__main__':
    main()
